<?php

/**
 * @file
 * Localgov Workflow module hooks.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Config\FileStorage;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\localgov_roles\RolesHelper;
use Drupal\node\NodeTypeInterface;
use Drupal\workflows\Entity\Workflow;

/**
 * Implements hook_localgov_roles_default().
 */
function localgov_workflows_localgov_roles_default(): array {
  return [
    RolesHelper::EDITOR_ROLE => [
      'add scheduled transitions node localgov_services_landing',
      'add scheduled transitions node localgov_services_page',
      'add scheduled transitions node localgov_services_sublanding',
      'reschedule scheduled transitions node localgov_services_landing',
      'reschedule scheduled transitions node localgov_services_page',
      'reschedule scheduled transitions node localgov_services_sublanding',
      'use localgov_editorial transition approve',
      'use localgov_editorial transition archive',
      'use localgov_editorial transition archived_draft',
      'use localgov_editorial transition archived_published',
      'use localgov_editorial transition create_new_draft',
      'use localgov_editorial transition publish',
      'use localgov_editorial transition reject',
      'use localgov_editorial transition submit_for_review',
      'view all scheduled transitions',
      'view any unpublished content',
      'view latest version',
      'view scheduled transitions node localgov_services_landing',
      'view scheduled transitions node localgov_services_page',
      'view scheduled transitions node localgov_services_sublanding',
    ],
    RolesHelper::AUTHOR_ROLE => [
      'add scheduled transitions node localgov_services_landing',
      'add scheduled transitions node localgov_services_page',
      'add scheduled transitions node localgov_services_sublanding',
      'reschedule scheduled transitions node localgov_services_landing',
      'reschedule scheduled transitions node localgov_services_page',
      'reschedule scheduled transitions node localgov_services_sublanding',
      'use localgov_editorial transition archive',
      'use localgov_editorial transition create_new_draft',
      'use localgov_editorial transition reject',
      'use localgov_editorial transition submit_for_review',
      'use localgov_editorial transition publish',
      'view all scheduled transitions',
      'view any unpublished content',
      'view latest version',
      'view scheduled transitions node localgov_services_landing',
      'view scheduled transitions node localgov_services_page',
      'view scheduled transitions node localgov_services_sublanding',
    ],
    RolesHelper::CONTRIBUTOR_ROLE => [
      'add scheduled transitions node localgov_services_landing',
      'add scheduled transitions node localgov_services_page',
      'add scheduled transitions node localgov_services_sublanding',
      'reschedule scheduled transitions node localgov_services_landing',
      'reschedule scheduled transitions node localgov_services_page',
      'reschedule scheduled transitions node localgov_services_sublanding',
      'use localgov_editorial transition create_new_draft',
      'use localgov_editorial transition reject',
      'use localgov_editorial transition submit_for_review',
      'view all scheduled transitions',
      'view any unpublished content',
      'view latest version',
      'view scheduled transitions node localgov_services_landing',
      'view scheduled transitions node localgov_services_page',
      'view scheduled transitions node localgov_services_sublanding',
      'use localgov_editorial transition create_new_draft',
      'use localgov_editorial transition reject',
      'use localgov_editorial transition submit_for_review',
      'view any unpublished content',
      'view latest version',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function localgov_workflows_node_type_insert(NodeTypeInterface $node_type) {
  // Add workflow to new localgov_ node bundle with no other workflow.
  if (strpos($node_type->id(), 'localgov_') === 0) {
    $types = \Drupal::service('entity_type.bundle.info')->getBundleInfo('node');
    if (empty($types['node']['workflow'])) {
      $editorial = Workflow::load('localgov_editorial');
      $type = $editorial->getTypePlugin();
      $type->addEntityTypeAndBundle('node', $node_type->id());
      $editorial->save();
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function localgov_workflows_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {

  // Disabled the default 'content moderation` tab on admin content pages as
  // this expects the default 'editorial' workflow is enabled and doesn't work
  // with other workflows without altering the content moderation view.
  $admin_content_routes = [
    'system.admin_content',
    'view.localgov_approvals_dashboard.approvals_dashboard',
  ];
  if (in_array($route_name, $admin_content_routes)) {

    // Check if there are more workflows enabled than localgov_editorial.
    $workflows = \Drupal::entityQuery('workflow')->execute();
    if (in_array('localgov_editorial', $workflows) && count($workflows) == 1) {

      // Hide the moderated content tab.
      for ($i = 0; $i < count($data['tabs']); $i++) {
        foreach ($data['tabs'][$i] as $key => $tab) {
          if ($key == 'content_moderation.moderated_content') {
            $data['tabs'][$i][$key]['#access'] = AccessResult::neutral();
          }
        }
      }
    }
  }

  // Add cache dependency on workflow.
  $cacheability->addCacheTags(['config:workflow_list']);
}

/**
 * Implements hook_form_alter().
 */
function localgov_workflows_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  $x = 0;
  if (isset($form['localgov_last_review_date']) && isset($form['localgov_next_review_date'])) {
    $form['review_status'] = [
      '#type' => 'details',
      '#title' => t('Review status'),
      '#summary' => 'Review status dates',
      '#group' => 'advanced',
      '#weight' => -5,
    ];
    $form['localgov_last_review_date']['#group'] = 'review_status';
    $form['localgov_next_review_date']['#group'] = 'review_status';
    $form['actions']['reviewed'] = [
      '#type' => 'checkbox',
      '#title' => 'Content reviewed',
      '#default' => FALSE,
    ];
  }
}

/**
 * Add next and last review date fields to content type.
 *
 * @param string $bundle
 *   Machine name of content type.
 */
function localgov_workflows_add_review_to_content_type($bundle) {
  $config_directory = new FileStorage(__DIR__ . '/config/install');

  $fields = [
    'localgov_last_review_date' => [
      'label' => 'Last reviewed',
      'description' => 'Date and time the content was last reviewed.',
    ],
    'localgov_next_review_date' => [
      'label' => 'Next review',
      'description' => 'Date and time this content is next due to be reviewed.',
    ],
  ];

  foreach ($fields as $field => $config) {

    // Load / create field storage.
    $field_storage = FieldStorageConfig::loadByName('node', $field);
    if (empty($field_storage)) {
      $field_storage = $config_directory->read('field.storage.node.' . $field);
      FieldStorageConfig::create($field_storage)->save();
    }

    // Add field to the content type.
    if (empty(FieldConfig::loadByName('node', $bundle, $field))) {
      FieldConfig::create([
        'field_name' => $field,
        'entity_type' => 'node',
        'bundle' => $bundle,
        'label' => $config['label'],
        'description' => $config['description'],
        'required' => FALSE,
      ])->save();
    }
  }

  // Hide fields on all page view modes.
  $view_modes = \Drupal::service('entity_display.repository')
    ->getViewModeOptionsByBundle('node', $bundle);
  foreach ($view_modes as $mode => $label) {
    $view_display = \Drupal::entityTypeManager()
      ->getStorage('entity_view_display')
      ->load('node.' . $bundle . '.' . $mode);
    foreach ($fields as $field => $config) {
      $view_display->setComponent($field, [
        'region' => 'hidden',
      ]);
    }
    $view_display->save();
  }

  // Configure fields in form display.
  $form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.' . $bundle . '.default');
  foreach ($fields as $field => $config) {
    $form_display->setComponent($field, [
      'type' => 'datetime_default',
      'region' => 'content',
    ]);
  }
  $form_display->save();
}
