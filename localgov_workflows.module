<?php

/**
 * @file
 * Localgov Workflow module hooks.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\localgov_roles\RolesHelper;
use Drupal\node\NodeTypeInterface;
use Drupal\workflows\Entity\Workflow;

/**
 * Implements hook_localgov_roles_default().
 */
function localgov_workflows_localgov_roles_default(): array {
  return [
    RolesHelper::EDITOR_ROLE => [
      'add scheduled transitions node localgov_services_landing',
      'add scheduled transitions node localgov_services_page',
      'add scheduled transitions node localgov_services_sublanding',
      'reschedule scheduled transitions node localgov_services_landing',
      'reschedule scheduled transitions node localgov_services_page',
      'reschedule scheduled transitions node localgov_services_sublanding',
      'use localgov_editorial transition approve',
      'use localgov_editorial transition archive',
      'use localgov_editorial transition archived_draft',
      'use localgov_editorial transition archived_published',
      'use localgov_editorial transition create_new_draft',
      'use localgov_editorial transition publish',
      'use localgov_editorial transition reject',
      'use localgov_editorial transition submit_for_review',
      'view all scheduled transitions',
      'view any unpublished content',
      'view latest version',
      'view scheduled transitions node localgov_services_landing',
      'view scheduled transitions node localgov_services_page',
      'view scheduled transitions node localgov_services_sublanding',
    ],
    RolesHelper::AUTHOR_ROLE => [
      'add scheduled transitions node localgov_services_landing',
      'add scheduled transitions node localgov_services_page',
      'add scheduled transitions node localgov_services_sublanding',
      'reschedule scheduled transitions node localgov_services_landing',
      'reschedule scheduled transitions node localgov_services_page',
      'reschedule scheduled transitions node localgov_services_sublanding',
      'use localgov_editorial transition archive',
      'use localgov_editorial transition create_new_draft',
      'use localgov_editorial transition reject',
      'use localgov_editorial transition submit_for_review',
      'use localgov_editorial transition publish',
      'view all scheduled transitions',
      'view any unpublished content',
      'view latest version',
      'view scheduled transitions node localgov_services_landing',
      'view scheduled transitions node localgov_services_page',
      'view scheduled transitions node localgov_services_sublanding',
    ],
    RolesHelper::CONTRIBUTOR_ROLE => [
      'add scheduled transitions node localgov_services_landing',
      'add scheduled transitions node localgov_services_page',
      'add scheduled transitions node localgov_services_sublanding',
      'reschedule scheduled transitions node localgov_services_landing',
      'reschedule scheduled transitions node localgov_services_page',
      'reschedule scheduled transitions node localgov_services_sublanding',
      'use localgov_editorial transition create_new_draft',
      'use localgov_editorial transition reject',
      'use localgov_editorial transition submit_for_review',
      'view all scheduled transitions',
      'view any unpublished content',
      'view latest version',
      'view scheduled transitions node localgov_services_landing',
      'view scheduled transitions node localgov_services_page',
      'view scheduled transitions node localgov_services_sublanding',
      'use localgov_editorial transition create_new_draft',
      'use localgov_editorial transition reject',
      'use localgov_editorial transition submit_for_review',
      'view any unpublished content',
      'view latest version',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function localgov_workflows_node_type_insert(NodeTypeInterface $node_type) {
  // Add workflow to new localgov_ node bundle with no other workflow.
  if (strpos($node_type->id(), 'localgov_') === 0) {
    $types = \Drupal::service('entity_type.bundle.info')->getBundleInfo('node');
    if (empty($types['node']['workflow'])) {
      $editorial = Workflow::load('localgov_editorial');
      $type = $editorial->getTypePlugin();
      $type->addEntityTypeAndBundle('node', $node_type->id());
      $editorial->save();
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function localgov_workflows_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {

  // Disabled the default 'content moderation` tab on admin content pages as
  // this expects the default 'editorial' workflow is enabled and doesn't work
  // with other workflows without altering the content moderation view.
  $admin_content_routes = [
    'system.admin_content',
    'view.localgov_approvals_dashboard.approvals_dashboard',
  ];
  if (in_array($route_name, $admin_content_routes)) {

    // Check if there are more workflows enabled than localgov_editorial.
    $workflows = \Drupal::entityQuery('workflow')->execute();
    if (in_array('localgov_editorial', $workflows) && count($workflows) == 1) {

      // Hide the moderated content tab.
      for ($i = 0; $i < count($data['tabs']); $i++) {
        foreach ($data['tabs'][$i] as $key => $tab) {
          if ($key == 'content_moderation.moderated_content') {
            $data['tabs'][$i][$key]['#access'] = AccessResult::neutral();
          }
        }
      }
    }
  }

  // Add cache dependency on workflow.
  $cacheability->addCacheTags(['config:workflow_list']);
}

/**
 * Implements hook_entity_base_field_info().
 */
function localgov_workflows_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {

  // Add the review status field to nodes configured for scheduled transitions.
  if ($entity_type->id() === 'node') {
    $scheduled_config = \Drupal::service('config.factory')->get('scheduled_transitions.settings');

    if (is_null($scheduled_config)) {
      return;
    }

    $scheduled_bundles = $scheduled_config->get('bundles');
    foreach ($scheduled_bundles as $scheduled_bundle) {
      if ($scheduled_bundle['entity_type'] == $entity_type->id() && $scheduled_bundle['bundle'] == $bundle) {
        $fields['review_status'] = BaseFieldDefinition::create('review_status')
          ->setLabel(t('Review status'))
          ->setDisplayOptions('form', [
            'type' => 'review_status',
            'weight' => -5,
          ])
          ->setDisplayConfigurable('form', TRUE)
          ->setComputed(TRUE);

        return $fields;
      }
    }
  }
}
